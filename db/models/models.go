// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package models

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type PilotClassifications string

const (
	PilotClassificationsA PilotClassifications = "A"
	PilotClassificationsB PilotClassifications = "B"
	PilotClassificationsC PilotClassifications = "C"
	PilotClassificationsD PilotClassifications = "D"
)

func (e *PilotClassifications) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PilotClassifications(s)
	case string:
		*e = PilotClassifications(s)
	default:
		return fmt.Errorf("unsupported scan type for PilotClassifications: %T", src)
	}
	return nil
}

type NullPilotClassifications struct {
	PilotClassifications PilotClassifications
	Valid                bool // Valid is true if PilotClassifications is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPilotClassifications) Scan(value interface{}) error {
	if value == nil {
		ns.PilotClassifications, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PilotClassifications.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPilotClassifications) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PilotClassifications), nil
}

type PilotStatuses string

const (
	PilotStatusesActive    PilotStatuses = "active"
	PilotStatusesInactive  PilotStatuses = "inactive"
	PilotStatusesSuspended PilotStatuses = "suspended"
)

func (e *PilotStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PilotStatuses(s)
	case string:
		*e = PilotStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for PilotStatuses: %T", src)
	}
	return nil
}

type NullPilotStatuses struct {
	PilotStatuses PilotStatuses
	Valid         bool // Valid is true if PilotStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPilotStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.PilotStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PilotStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPilotStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PilotStatuses), nil
}

type VarietyTypes string

const (
	VarietyTypesContinuous VarietyTypes = "continuous"
	VarietyTypesCyclic     VarietyTypes = "cyclic"
)

func (e *VarietyTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VarietyTypes(s)
	case string:
		*e = VarietyTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for VarietyTypes: %T", src)
	}
	return nil
}

type NullVarietyTypes struct {
	VarietyTypes VarietyTypes
	Valid        bool // Valid is true if VarietyTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVarietyTypes) Scan(value interface{}) error {
	if value == nil {
		ns.VarietyTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VarietyTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVarietyTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VarietyTypes), nil
}

type Farm struct {
	ID               int64
	FarmCode         string
	FarmCoordinates  string
	FarmAirspace     string
	FarmLocation     string
	FarmGeolocation  string
	FarmCreationDate time.Time
	FarmContact      int64
}

type Flight struct {
	ID                    int64
	FlightDate            time.Time
	FlightFarmLocation    string
	FlightFarmID          string
	FlightFarmGeolocation string
	FlightDuration        string
	FlightPilot           string
	FlightAcreage         string
}

type Operator struct {
	ID                           int64
	OperatorID                   string
	OperatorName                 string
	OperatorHeadquater           string
	OperatorNumberPilotsDeployed int32
	OpertorContact               int64
}

type Pilot struct {
	ID                    int64
	PilotID               string
	PilotOperatorID       string
	PilotInitials         string
	PilotNumber           int32
	PilotFullName         string
	PilotEntryDate        time.Time
	PilotLicenseNumber    int64
	PilotFarmLocationCode string
	PilotFarmLocation     string
	PilotStatus           PilotStatuses
	PilotClassification   PilotClassifications
	PilotFlightHours      string
	PilotCoveredAcreage   string
}

type Variety struct {
	ID                      int64
	VarietyInternalIdentity string
	VarietyBotanicalName    string
	VarietyFarmID           string
	VarietyCreationDate     time.Time
	VarietyAcreage          int64
	VarietyType             VarietyTypes
	// 7 day encoding e.g 1010000 for sunday and tuesday schedule
	VarietyItervalCode string
}
