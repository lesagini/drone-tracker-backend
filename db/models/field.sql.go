// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: field.sql

package models

import (
	"context"
)

const createField = `-- name: CreateField :one
INSERT INTO fields (
        field_name,
        field_type,
        field_farm_id,
        field_variety_id,
        field_polygon,
        field_area,
        field_dieback,
        field_stage_name,
        field_status,
        field_notes
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, field_name, field_type, field_farm_id, field_variety_id, field_polygon, field_area, field_dieback, field_stage_name, field_status, field_notes, field_creation_date
`

type CreateFieldParams struct {
	FieldName      string
	FieldType      FieldTypes
	FieldFarmID    string
	FieldVarietyID string
	FieldPolygon   string
	FieldArea      string
	FieldDieback   string
	FieldStageName string
	FieldStatus    FieldStatus
	FieldNotes     string
}

func (q *Queries) CreateField(ctx context.Context, arg CreateFieldParams) (Field, error) {
	row := q.db.QueryRowContext(ctx, createField,
		arg.FieldName,
		arg.FieldType,
		arg.FieldFarmID,
		arg.FieldVarietyID,
		arg.FieldPolygon,
		arg.FieldArea,
		arg.FieldDieback,
		arg.FieldStageName,
		arg.FieldStatus,
		arg.FieldNotes,
	)
	var i Field
	err := row.Scan(
		&i.ID,
		&i.FieldName,
		&i.FieldType,
		&i.FieldFarmID,
		&i.FieldVarietyID,
		&i.FieldPolygon,
		&i.FieldArea,
		&i.FieldDieback,
		&i.FieldStageName,
		&i.FieldStatus,
		&i.FieldNotes,
		&i.FieldCreationDate,
	)
	return i, err
}

const getField = `-- name: GetField :one
SELECT id, field_name, field_type, field_farm_id, field_variety_id, field_polygon, field_area, field_dieback, field_stage_name, field_status, field_notes, field_creation_date
FROM fields
WHERE field_name = $1 AND field_farm_id = $2
LIMIT 1
`

type GetFieldParams struct {
	FieldName   string
	FieldFarmID string
}

func (q *Queries) GetField(ctx context.Context, arg GetFieldParams) (Field, error) {
	row := q.db.QueryRowContext(ctx, getField, arg.FieldName, arg.FieldFarmID)
	var i Field
	err := row.Scan(
		&i.ID,
		&i.FieldName,
		&i.FieldType,
		&i.FieldFarmID,
		&i.FieldVarietyID,
		&i.FieldPolygon,
		&i.FieldArea,
		&i.FieldDieback,
		&i.FieldStageName,
		&i.FieldStatus,
		&i.FieldNotes,
		&i.FieldCreationDate,
	)
	return i, err
}

const getFieldForUpdate = `-- name: GetFieldForUpdate :one
SELECT id, field_name, field_type, field_farm_id, field_variety_id, field_polygon, field_area, field_dieback, field_stage_name, field_status, field_notes, field_creation_date
FROM fields
WHERE field_name = $1 AND field_farm_id = $2
LIMIT 1 FOR NO KEY
UPDATE
`

type GetFieldForUpdateParams struct {
	FieldName   string
	FieldFarmID string
}

func (q *Queries) GetFieldForUpdate(ctx context.Context, arg GetFieldForUpdateParams) (Field, error) {
	row := q.db.QueryRowContext(ctx, getFieldForUpdate, arg.FieldName, arg.FieldFarmID)
	var i Field
	err := row.Scan(
		&i.ID,
		&i.FieldName,
		&i.FieldType,
		&i.FieldFarmID,
		&i.FieldVarietyID,
		&i.FieldPolygon,
		&i.FieldArea,
		&i.FieldDieback,
		&i.FieldStageName,
		&i.FieldStatus,
		&i.FieldNotes,
		&i.FieldCreationDate,
	)
	return i, err
}

const listFields = `-- name: ListFields :many
SELECT id, field_name, field_type, field_farm_id, field_variety_id, field_polygon, field_area, field_dieback, field_stage_name, field_status, field_notes, field_creation_date
FROM fields
ORDER BY field_name
`

func (q *Queries) ListFields(ctx context.Context) ([]Field, error) {
	rows, err := q.db.QueryContext(ctx, listFields)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Field
	for rows.Next() {
		var i Field
		if err := rows.Scan(
			&i.ID,
			&i.FieldName,
			&i.FieldType,
			&i.FieldFarmID,
			&i.FieldVarietyID,
			&i.FieldPolygon,
			&i.FieldArea,
			&i.FieldDieback,
			&i.FieldStageName,
			&i.FieldStatus,
			&i.FieldNotes,
			&i.FieldCreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateField = `-- name: UpdateField :one
UPDATE fields
set field_name = $1,
    field_farm_id = $2,
    field_type = $3,
    field_variety_id = $4,
    field_polygon = $5,
    field_area = $6,
    field_dieback = $7,
    field_stage_name = $8,
    field_status = $9,
    field_notes = $10
WHERE field_name = $11 AND field_farm_id = $12
RETURNING id, field_name, field_type, field_farm_id, field_variety_id, field_polygon, field_area, field_dieback, field_stage_name, field_status, field_notes, field_creation_date
`

type UpdateFieldParams struct {
	FieldName      string
	FieldFarmID    string
	FieldType      FieldTypes
	FieldVarietyID string
	FieldPolygon   string
	FieldArea      string
	FieldDieback   string
	FieldStageName string
	FieldStatus    FieldStatus
	FieldNotes     string
	FieldName_2    string
	FieldFarmID_2  string
}

func (q *Queries) UpdateField(ctx context.Context, arg UpdateFieldParams) (Field, error) {
	row := q.db.QueryRowContext(ctx, updateField,
		arg.FieldName,
		arg.FieldFarmID,
		arg.FieldType,
		arg.FieldVarietyID,
		arg.FieldPolygon,
		arg.FieldArea,
		arg.FieldDieback,
		arg.FieldStageName,
		arg.FieldStatus,
		arg.FieldNotes,
		arg.FieldName_2,
		arg.FieldFarmID_2,
	)
	var i Field
	err := row.Scan(
		&i.ID,
		&i.FieldName,
		&i.FieldType,
		&i.FieldFarmID,
		&i.FieldVarietyID,
		&i.FieldPolygon,
		&i.FieldArea,
		&i.FieldDieback,
		&i.FieldStageName,
		&i.FieldStatus,
		&i.FieldNotes,
		&i.FieldCreationDate,
	)
	return i, err
}
