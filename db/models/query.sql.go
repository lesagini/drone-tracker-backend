// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package models

import (
	"context"
)

const createFarm = `-- name: CreateFarm :one
INSERT INTO farms (
        farm_code,
        farm_coordinates,
        farm_airspace,
        farm_location,
        farm_geolocation,
        farm_contact
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, farm_code, farm_coordinates, farm_airspace, farm_location, farm_geolocation, farm_creation_date, farm_contact
`

type CreateFarmParams struct {
	FarmCode        string
	FarmCoordinates string
	FarmAirspace    string
	FarmLocation    string
	FarmGeolocation string
	FarmContact     int64
}

func (q *Queries) CreateFarm(ctx context.Context, arg CreateFarmParams) (Farm, error) {
	row := q.db.QueryRowContext(ctx, createFarm,
		arg.FarmCode,
		arg.FarmCoordinates,
		arg.FarmAirspace,
		arg.FarmLocation,
		arg.FarmGeolocation,
		arg.FarmContact,
	)
	var i Farm
	err := row.Scan(
		&i.ID,
		&i.FarmCode,
		&i.FarmCoordinates,
		&i.FarmAirspace,
		&i.FarmLocation,
		&i.FarmGeolocation,
		&i.FarmCreationDate,
		&i.FarmContact,
	)
	return i, err
}

const createFlight = `-- name: CreateFlight :one
INSERT INTO flights (
    flight_farm_location,
    flight_farm_id,
    flight_farm_geolocation,
    flight_duration,
    flight_pilot,
    flight_acreage
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, flight_date, flight_farm_location, flight_farm_id, flight_farm_geolocation, flight_duration, flight_pilot, flight_acreage
`

type CreateFlightParams struct {
	FlightFarmLocation    string
	FlightFarmID          string
	FlightFarmGeolocation string
	FlightDuration        string
	FlightPilot           string
	FlightAcreage         string
}

func (q *Queries) CreateFlight(ctx context.Context, arg CreateFlightParams) (Flight, error) {
	row := q.db.QueryRowContext(ctx, createFlight,
		arg.FlightFarmLocation,
		arg.FlightFarmID,
		arg.FlightFarmGeolocation,
		arg.FlightDuration,
		arg.FlightPilot,
		arg.FlightAcreage,
	)
	var i Flight
	err := row.Scan(
		&i.ID,
		&i.FlightDate,
		&i.FlightFarmLocation,
		&i.FlightFarmID,
		&i.FlightFarmGeolocation,
		&i.FlightDuration,
		&i.FlightPilot,
		&i.FlightAcreage,
	)
	return i, err
}

const createOperator = `-- name: CreateOperator :one
INSERT INTo operators (
        operator_id,
        operator_name,
        operator_headquater,
        operator_number_pilots_deployed,
        opertor_contact
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, operator_id, operator_name, operator_headquater, operator_number_pilots_deployed, opertor_contact
`

type CreateOperatorParams struct {
	OperatorID                   string
	OperatorName                 string
	OperatorHeadquater           string
	OperatorNumberPilotsDeployed int32
	OpertorContact               int64
}

func (q *Queries) CreateOperator(ctx context.Context, arg CreateOperatorParams) (Operator, error) {
	row := q.db.QueryRowContext(ctx, createOperator,
		arg.OperatorID,
		arg.OperatorName,
		arg.OperatorHeadquater,
		arg.OperatorNumberPilotsDeployed,
		arg.OpertorContact,
	)
	var i Operator
	err := row.Scan(
		&i.ID,
		&i.OperatorID,
		&i.OperatorName,
		&i.OperatorHeadquater,
		&i.OperatorNumberPilotsDeployed,
		&i.OpertorContact,
	)
	return i, err
}

const createPilot = `-- name: CreatePilot :one
INSERT INTO pilots (
        pilot_id,
        pilot_operator_id,
        pilot_initials,
        pilot_number,
        pilot_full_name,
        pilot_license_number,
        pilot_farm_location_code,
        pilot_farm_location,
        pilot_status,
        pilot_classification,
        pilot_flight_hours,
        pilot_covered_acreage
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12
    )
RETURNING id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
`

type CreatePilotParams struct {
	PilotID               string
	PilotOperatorID       string
	PilotInitials         string
	PilotNumber           int32
	PilotFullName         string
	PilotLicenseNumber    int64
	PilotFarmLocationCode string
	PilotFarmLocation     string
	PilotStatus           PilotStatuses
	PilotClassification   PilotClassifications
	PilotFlightHours      string
	PilotCoveredAcreage   string
}

func (q *Queries) CreatePilot(ctx context.Context, arg CreatePilotParams) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, createPilot,
		arg.PilotID,
		arg.PilotOperatorID,
		arg.PilotInitials,
		arg.PilotNumber,
		arg.PilotFullName,
		arg.PilotLicenseNumber,
		arg.PilotFarmLocationCode,
		arg.PilotFarmLocation,
		arg.PilotStatus,
		arg.PilotClassification,
		arg.PilotFlightHours,
		arg.PilotCoveredAcreage,
	)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}

const createVariety = `-- name: CreateVariety :one
INSERT INTO varieties (
    variety_internal_identity,
    variety_botanical_name,
    variety_farm_id,
    variety_acreage,
    variety_type,
    variety_iterval_code
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, variety_internal_identity, variety_botanical_name, variety_farm_id, variety_creation_date, variety_acreage, variety_type, variety_iterval_code
`

type CreateVarietyParams struct {
	VarietyInternalIdentity string
	VarietyBotanicalName    string
	VarietyFarmID           string
	VarietyAcreage          int64
	VarietyType             VarietyTypes
	VarietyItervalCode      string
}

func (q *Queries) CreateVariety(ctx context.Context, arg CreateVarietyParams) (Variety, error) {
	row := q.db.QueryRowContext(ctx, createVariety,
		arg.VarietyInternalIdentity,
		arg.VarietyBotanicalName,
		arg.VarietyFarmID,
		arg.VarietyAcreage,
		arg.VarietyType,
		arg.VarietyItervalCode,
	)
	var i Variety
	err := row.Scan(
		&i.ID,
		&i.VarietyInternalIdentity,
		&i.VarietyBotanicalName,
		&i.VarietyFarmID,
		&i.VarietyCreationDate,
		&i.VarietyAcreage,
		&i.VarietyType,
		&i.VarietyItervalCode,
	)
	return i, err
}

const getPilot = `-- name: GetPilot :one
SELECT id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
FROM pilots
WHERE pilot_id = $1
LIMIT 1
`

func (q *Queries) GetPilot(ctx context.Context, pilotID string) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, getPilot, pilotID)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}

const getPilotForUpdate = `-- name: GetPilotForUpdate :one
SELECT id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
FROM pilots
WHERE pilot_id = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPilotForUpdate(ctx context.Context, pilotID string) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, getPilotForUpdate, pilotID)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}

const listFarms = `-- name: ListFarms :many
SELECT id, farm_code, farm_coordinates, farm_airspace, farm_location, farm_geolocation, farm_creation_date, farm_contact
FROM farms
ORDER BY farm_code
`

func (q *Queries) ListFarms(ctx context.Context) ([]Farm, error) {
	rows, err := q.db.QueryContext(ctx, listFarms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Farm
	for rows.Next() {
		var i Farm
		if err := rows.Scan(
			&i.ID,
			&i.FarmCode,
			&i.FarmCoordinates,
			&i.FarmAirspace,
			&i.FarmLocation,
			&i.FarmGeolocation,
			&i.FarmCreationDate,
			&i.FarmContact,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePilot = `-- name: UpdatePilot :one
UPDATE pilots
  set pilot_flight_hours = $2,
  pilot_covered_acreage = $3
WHERE pilot_id = $1
RETURNING id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
`

type UpdatePilotParams struct {
	PilotID             string
	PilotFlightHours    string
	PilotCoveredAcreage string
}

func (q *Queries) UpdatePilot(ctx context.Context, arg UpdatePilotParams) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, updatePilot, arg.PilotID, arg.PilotFlightHours, arg.PilotCoveredAcreage)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}
