// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: pilot.sql

package models

import (
	"context"
)

const createPilot = `-- name: CreatePilot :one
INSERT INTO pilots (
        pilot_id,
        pilot_operator_id,
        pilot_initials,
        pilot_number,
        pilot_full_name,
        pilot_license_number,
        pilot_farm_location_code,
        pilot_farm_location,
        pilot_status,
        pilot_classification,
        pilot_flight_hours,
        pilot_covered_acreage
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12
    )
RETURNING id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
`

type CreatePilotParams struct {
	PilotID               string
	PilotOperatorID       string
	PilotInitials         string
	PilotNumber           int32
	PilotFullName         string
	PilotLicenseNumber    int64
	PilotFarmLocationCode string
	PilotFarmLocation     string
	PilotStatus           PilotStatuses
	PilotClassification   PilotClassifications
	PilotFlightHours      string
	PilotCoveredAcreage   string
}

func (q *Queries) CreatePilot(ctx context.Context, arg CreatePilotParams) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, createPilot,
		arg.PilotID,
		arg.PilotOperatorID,
		arg.PilotInitials,
		arg.PilotNumber,
		arg.PilotFullName,
		arg.PilotLicenseNumber,
		arg.PilotFarmLocationCode,
		arg.PilotFarmLocation,
		arg.PilotStatus,
		arg.PilotClassification,
		arg.PilotFlightHours,
		arg.PilotCoveredAcreage,
	)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}

const getPilot = `-- name: GetPilot :one
SELECT id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
FROM pilots
WHERE pilot_id = $1
LIMIT 1
`

func (q *Queries) GetPilot(ctx context.Context, pilotID string) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, getPilot, pilotID)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}

const getPilotForUpdate = `-- name: GetPilotForUpdate :one
SELECT id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
FROM pilots
WHERE pilot_id = $1
LIMIT 1 FOR NO KEY
UPDATE
`

func (q *Queries) GetPilotForUpdate(ctx context.Context, pilotID string) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, getPilotForUpdate, pilotID)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}

const listPilots = `-- name: ListPilots :many
SELECT id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
FROM pilots
ORDER BY pilot_id
`

func (q *Queries) ListPilots(ctx context.Context) ([]Pilot, error) {
	rows, err := q.db.QueryContext(ctx, listPilots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pilot
	for rows.Next() {
		var i Pilot
		if err := rows.Scan(
			&i.ID,
			&i.PilotID,
			&i.PilotOperatorID,
			&i.PilotInitials,
			&i.PilotNumber,
			&i.PilotFullName,
			&i.PilotEntryDate,
			&i.PilotLicenseNumber,
			&i.PilotFarmLocationCode,
			&i.PilotFarmLocation,
			&i.PilotStatus,
			&i.PilotClassification,
			&i.PilotFlightHours,
			&i.PilotCoveredAcreage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePilot = `-- name: UpdatePilot :one
UPDATE pilots
set pilot_flight_hours = $2,
    pilot_covered_acreage = $3
WHERE pilot_id = $1
RETURNING id, pilot_id, pilot_operator_id, pilot_initials, pilot_number, pilot_full_name, pilot_entry_date, pilot_license_number, pilot_farm_location_code, pilot_farm_location, pilot_status, pilot_classification, pilot_flight_hours, pilot_covered_acreage
`

type UpdatePilotParams struct {
	PilotID             string
	PilotFlightHours    string
	PilotCoveredAcreage string
}

func (q *Queries) UpdatePilot(ctx context.Context, arg UpdatePilotParams) (Pilot, error) {
	row := q.db.QueryRowContext(ctx, updatePilot, arg.PilotID, arg.PilotFlightHours, arg.PilotCoveredAcreage)
	var i Pilot
	err := row.Scan(
		&i.ID,
		&i.PilotID,
		&i.PilotOperatorID,
		&i.PilotInitials,
		&i.PilotNumber,
		&i.PilotFullName,
		&i.PilotEntryDate,
		&i.PilotLicenseNumber,
		&i.PilotFarmLocationCode,
		&i.PilotFarmLocation,
		&i.PilotStatus,
		&i.PilotClassification,
		&i.PilotFlightHours,
		&i.PilotCoveredAcreage,
	)
	return i, err
}
